{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formatDateOutput","sunOrSet","theDay","selectedDay","Date","concat","toISOString","DateTime","fromISO","zone","toLocaleString","TIME_WITH_SECONDS","DateComponent","react_default","a","createElement","es","selected","this","props","startDate","onChange","handleChange","dateFormat","placeholderText","Component","AppRoot","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","loading","error","isToday","settings","requestDomain","arubaLat","arubaLng","bind","assertThisInitialized","_this2","url","encodeURI","toDateString","fetch","then","res","ok","json","setState","results","catch","err","console","date","_this3","id","className","sunrise","sunset","day_length","href","App_DateComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93307aa6.chunk.js","sourcesContent":["import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport 'core-js/features/string/repeat';\nimport 'core-js/features/array/find';\nimport 'core-js/features/array/find-index';\nimport 'core-js/features/array/includes';\nimport 'core-js/features/math/trunc';\nimport 'core-js/features/math/sign';\nimport 'core-js/features/number/is-nan';\nimport 'date-time-format-timezone';\nimport React, { Component } from 'react';\nimport './App.css';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { DateTime } from \"luxon\";\n\n\n/**\n * Format the date to the correct timezone\n * @param {string} sunOrSet \n * @param {date string} theDay \n */\nconst formatDateOutput = (sunOrSet, theDay) => {\n  if (typeof sunOrSet != 'undefined'){\n    let selectedDay = new Date(`${theDay} ${sunOrSet} UTC`);\n    selectedDay = selectedDay.toISOString();\n    const timeInput = DateTime.fromISO(selectedDay, { zone: 'America/Curacao' });\n    const timeOutput = timeInput.toLocaleString(DateTime.TIME_WITH_SECONDS);\n\n    return timeOutput;\n  }\n  \n  return false;\n}\n\nclass DateComponent extends Component {\n  render() {\n    return( \n      <DatePicker \n      selected={this.props.startDate}\n      onChange={this.props.handleChange}\n      dateFormat=\"MMM dd, yyyy\"\n      placeholderText=\"select a date\"\n      />\n    );\n  }\n}\n\nclass AppRoot extends Component {\n  // constructor\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: {},\n      loading: true,\n      error: false,\n      isToday: true,\n      startDate: new Date(),\n      settings:{\n        requestDomain: 'https://api.sunrise-sunset.org/',\n        arubaLat: '12.5183192',\n        arubaLng: '-70.1073755'\n      }\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // component mount\n  componentDidMount(){\n    const url = encodeURI(`${this.state.settings.requestDomain}json?lat=${this.state.settings.arubaLat}&lng=${this.state.settings.arubaLng}&date=${this.state.startDate.toDateString()}`);\n\n    fetch(url)\n        .then(res => {\n          if (!res.ok) {\n            throw res;\n          }\n          return res.json();\n        })\n        .then(data => {\n          this.setState({\n            loading: false,\n            data: data.results\n          });\n        })\n      .catch(err => {\n        console.error(err);\n        this.setState({\n          loading: false,\n          error: true,\n          startDate: new Date()\n        });\n      });\n  }\n\n  // change handler for datepicker\n  handleChange(date) {\n    const url = encodeURI(`${this.state.settings.requestDomain}json?lat=${this.state.settings.arubaLat}&lng=${this.state.settings.arubaLng}&date=${this.state.startDate.toDateString()}`);\n\n    fetch(url)\n      .then(res => {\n        if (!res.ok) {\n          throw res;\n        }\n        return res.json();\n      })\n      .then(data => {\n        this.setState({\n          loading: false,\n          data: data.results,\n          isToday: date,\n          startDate: date\n        });\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({\n          loading: false,\n          error: true,\n          startDate: new Date()\n        });\n      });\n  }\n\n  // render\n  render() {\n    return (\n      <div id=\"sunrise-sunset-wrapper\">\n        <div id=\"sunset-sunrise-app\" className=\"sunset-sunrise-app-field\">\n          <div className=\"app-results active\">\n            <div className=\"date ss-result\">\n              <h2>{this.state.isToday === true ? `Today: ${this.state.startDate.toDateString()}` : this.state.startDate.toDateString()} - Aruba</h2>\n            </div>\n            <div className=\"sunrise ss-result\">\n              <span className=\"label\">Sunrise</span>\n              <span className=\"value\">{formatDateOutput(this.state.data.sunrise, this.state.startDate.toDateString())}</span>\n            </div>\n            <div className=\"sunset ss-result\">\n              <span className=\"label\">Sunset</span>\n              <span className=\"value\">{formatDateOutput(this.state.data.sunset, this.state.startDate.toDateString())}</span>\n            </div>\n            <div className=\"dayLength ss-result\">\n              <span className=\"label\">Total amount of daylight</span>\n              <span className=\"value\">{this.state.data.day_length}</span>\n            </div>\n            <a className=\"small-link\" href=\"https://sunrise-sunset.org/\">(Sunset & Sunrise times courtesy of sunrise-sunset.org)</a>\n          </div>\n          <div className=\"app-fields\">\n            <p>Please <strong>pick a date</strong> to display the sunset and sunrise times for that day.</p>\n            <DateComponent \n            startDate={this.state.startDate} \n            handleChange={this.handleChange}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AppRoot;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}